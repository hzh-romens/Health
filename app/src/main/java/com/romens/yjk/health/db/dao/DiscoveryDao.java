package com.romens.yjk.health.db.dao;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.romens.yjk.health.db.entity.DiscoveryCollection.NearbyPharmacy;
import com.romens.yjk.health.db.entity.DiscoveryCollection.InformationNews;
import com.romens.yjk.health.db.entity.DiscoveryCollection.FindDrugWithScanner;
import com.romens.yjk.health.db.entity.DiscoveryCollection.MedicationReminders;
import com.romens.yjk.health.db.entity.DiscoveryCollection.PharmicCounseling;

import com.romens.yjk.health.db.entity.DiscoveryEntity;

import java.util.Calendar;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserInfo.
 */
public class DiscoveryDao extends AbstractDao<DiscoveryEntity, Long> {

    public static final String TABLENAME = "Discovery";

    /**
     * Properties of entity DiscoveryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property IconRes = new Property(2, int.class, "iconRes", false, "ICON_RES");
        public final static Property IconUrl = new Property(3, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property Created = new Property(7, int.class, "created", false, "CREATED");
        public final static Property Updated = new Property(8, int.class, "updated", false, "UPDATED");
        public final static Property IsCover = new Property(9, int.class, "isCover", false, "IS_COVER");
        public final static Property SortIndex = new Property(10, int.class, "sortIndex", false, "SORT_INDEX");
        public final static Property PrimaryColor = new Property(11, int.class, "primaryColor", false, "PRIMARY_COLOR");
    }


    public DiscoveryDao(DaoConfig config) {
        super(config);
    }

    public DiscoveryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'Discovery' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'KEY' TEXT NOT NULL UNIQUE ," + // 1: key
                "'ICON_RES' TEXT NOT NULL ," + // 2: iconResId
                "'ICON_URL' TEXT NOT NULL ," + // 3: iconUrl
                "'NAME' TEXT NOT NULL ," + // 4: name
                "'VALUE' TEXT NOT NULL ," + // 5: value
                "'STATUS' INTEGER NOT NULL ," + // 6: status
                "'CREATED' INTEGER NOT NULL ," + // 7: created
                "'UPDATED' INTEGER NOT NULL ," + // 8: updated
                "'IS_COVER' INTEGER NOT NULL ," + // 9: isCover
                "'SORT_INDEX' INTEGER NOT NULL ," + // 10: index
                "'PRIMARY_COLOR' INTEGER NOT NULL );"); // 10: index
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_Discovery_KEY ON Discovery" +
                " (KEY);");

        initCreatedTableData(db);
    }

    public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
        dropTable(db, true);
        createTable(db, true);
    }

    public static void initCreatedTableData(SQLiteDatabase db) {
        ContentValues values = new ContentValues();
        //附近药店
        ContentValues value = new ContentValues();
        value.put("KEY", NearbyPharmacy.key);
        value.put("ICON_RES", NearbyPharmacy.iconRes);
        value.put("ICON_URL", NearbyPharmacy.iconUrl);
        value.put("NAME", NearbyPharmacy.name);
        value.put("VALUE", NearbyPharmacy.value);
        value.put("STATUS", 0);
        int time = (int) Calendar.getInstance().getTimeInMillis();
        value.put("CREATED", time);
        value.put("UPDATED", time);
        value.put("IS_COVER", NearbyPharmacy.isCover);
        value.put("SORT_INDEX", NearbyPharmacy.sortIndex);
        value.put("PRIMARY_COLOR", NearbyPharmacy.primaryColor);
        values.putAll(value);
        db.insert(TABLENAME, null, values);
        //最新资讯
        value = new ContentValues();
        value.put("KEY", InformationNews.key);
        value.put("ICON_RES", InformationNews.iconRes);
        value.put("ICON_URL", InformationNews.iconUrl);
        value.put("NAME", InformationNews.name);
        value.put("VALUE", InformationNews.value);
        value.put("STATUS", 0);
        time = (int) Calendar.getInstance().getTimeInMillis();
        value.put("CREATED", time);
        value.put("UPDATED", time);
        value.put("IS_COVER", InformationNews.isCover);
        value.put("SORT_INDEX", InformationNews.sortIndex);
        value.put("PRIMARY_COLOR", InformationNews.primaryColor);
        values.putAll(value);
        db.insert(TABLENAME, null, values);
        //附近药店
        value = new ContentValues();
        value.put("KEY", FindDrugWithScanner.key);
        value.put("ICON_RES", FindDrugWithScanner.iconRes);
        value.put("ICON_URL", FindDrugWithScanner.iconUrl);
        value.put("NAME", FindDrugWithScanner.name);
        value.put("VALUE", FindDrugWithScanner.value);
        value.put("STATUS", 0);
        time = (int) Calendar.getInstance().getTimeInMillis();
        value.put("CREATED", time);
        value.put("UPDATED", time);
        value.put("IS_COVER", FindDrugWithScanner.isCover);
        value.put("SORT_INDEX", FindDrugWithScanner.sortIndex);
        value.put("PRIMARY_COLOR", FindDrugWithScanner.primaryColor);
        values.putAll(value);
        db.insert(TABLENAME, null, values);
        //用药提醒
        value = new ContentValues();
        value.put("KEY", MedicationReminders.key);
        value.put("ICON_RES", MedicationReminders.iconRes);
        value.put("ICON_URL", MedicationReminders.iconUrl);
        value.put("NAME", MedicationReminders.name);
        value.put("VALUE", MedicationReminders.value);
        value.put("STATUS", 0);
        time = (int) Calendar.getInstance().getTimeInMillis();
        value.put("CREATED", time);
        value.put("UPDATED", time);
        value.put("IS_COVER", MedicationReminders.isCover);
        value.put("SORT_INDEX", MedicationReminders.sortIndex);
        value.put("PRIMARY_COLOR", MedicationReminders.primaryColor);
        values.putAll(value);
        db.insert(TABLENAME, null, values);

        //用药咨询
        value = new ContentValues();
        value.put("KEY", PharmicCounseling.key);
        value.put("ICON_RES", PharmicCounseling.iconRes);
        value.put("ICON_URL", PharmicCounseling.iconUrl);
        value.put("NAME", PharmicCounseling.name);
        value.put("VALUE", PharmicCounseling.value);
        value.put("STATUS", 0);
        time = (int) Calendar.getInstance().getTimeInMillis();
        value.put("CREATED", time);
        value.put("UPDATED", time);
        value.put("IS_COVER", PharmicCounseling.isCover);
        value.put("SORT_INDEX", PharmicCounseling.sortIndex);
        value.put("PRIMARY_COLOR", PharmicCounseling.primaryColor);
        values.putAll(value);
        db.insert(TABLENAME, null, values);
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Discovery'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiscoveryEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKey());
        stmt.bindLong(3, entity.getIconRes());
        stmt.bindString(4, entity.getIconUrl());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getValue());
        stmt.bindLong(7, entity.getStatus());
        stmt.bindLong(8, entity.getCreated());
        stmt.bindLong(9, entity.getUpdated());
        stmt.bindLong(10, entity.isCover() ? 1 : 0);
        stmt.bindLong(11, entity.getSortIndex());
        stmt.bindLong(12, entity.getPrimaryColor());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public DiscoveryEntity readEntity(Cursor cursor, int offset) {
        DiscoveryEntity entity = new DiscoveryEntity();
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0)); // id
        entity.setKey(cursor.getString(offset + 1)); // key
        entity.setIconRes(cursor.getInt(offset + 2));// iconResId
        entity.setIconUrl(cursor.getString(offset + 3)); // iconUrl
        entity.setName(cursor.getString(offset + 4)); // name
        entity.setValue(cursor.getString(offset + 5)); // value
        entity.setStatus(cursor.getInt(offset + 6)); // status
        entity.setCreated(cursor.getInt(offset + 7)); // created
        entity.setUpdated(cursor.getInt(offset + 8)); // updated
        entity.setIsCover(cursor.getInt(offset + 9) == 1); // isCover
        entity.setSortIndex(cursor.getInt(offset + 10)); // isCover
        entity.setPrimaryColor(cursor.getInt(offset + 11)); // isCover
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DiscoveryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setIconRes(cursor.getInt(offset + 2));
        entity.setIconUrl(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setValue(cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setCreated(cursor.getInt(offset + 7));
        entity.setUpdated(cursor.getInt(offset + 8));
        entity.setIsCover(cursor.getInt(offset + 9) == 1);
        entity.setSortIndex(cursor.getInt(offset + 10));
        entity.setPrimaryColor(cursor.getInt(offset + 11));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(DiscoveryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(DiscoveryEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
